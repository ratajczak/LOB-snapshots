AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template to get a Lambda function invoked every 10 seconds using Step Functions

Resources:
  GetLOBSnapshot:
    Type: AWS::Lambda::Function
    Properties:
      Handler: functions/get_lob_snapshot.lambda_handler
      Runtime: python3.6
      Timeout: 20
      #MemorySize: 128
      Role: !GetAtt GetLOBSnapshotExecutionRole.Arn
  CheckResponses:
    Type: AWS::Lambda::Function
    Properties:
      Handler: functions/check_responses.lambda_handler
      Runtime: python3.6
      Timeout: 20
      Role: !GetAtt GetLOBSnapshotExecutionRole.Arn

  GetLOBSnapshotExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LOBDumps:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LOBDumps
      AttributeDefinitions:
        - AttributeName: Pair
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: Pair
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 18

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: "LOBSnapshots"
      DefinitionString: 
        !Sub
          - |-
            {
              "Comment": "Invoke Lambda every 10 seconds",
              "StartAt": "CronTriggered",
              "States": {
                "CronTriggered": {
                  "Type": "Parallel",
                  "OutputPath": "$",
                  "ResultPath": "$.ParallelResultPath",
                  "Next": "CheckResponses",
                  "Branches": [
                    {
                     "StartAt": "Immediate",
                     "States": {
                        "Immediate": {
                          "Type": "Task",
                          "Resource": "${GetLOBSnapshotArn}",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "Wait10Seconds",
                      "States": {
                        "Wait10Seconds": {
                          "Type": "Wait",
                          "Seconds": 10,
                          "Next": "BookAfter10Seconds"
                         },
                         "BookAfter10Seconds": {
                           "Type": "Task",
                           "Resource": "${GetLOBSnapshotArn}",
                           "End": true
                         }
                       }
                     },
                     {
                      "StartAt": "Wait20Seconds",
                      "States": {
                        "Wait20Seconds": {
                          "Type": "Wait",
                          "Seconds": 20,
                          "Next": "BookAfter20Seconds"
                         },
                         "BookAfter20Seconds": {
                           "Type": "Task",
                           "Resource": "${GetLOBSnapshotArn}",
                           "End": true
                         }
                       }
                     },
                     {
                      "StartAt": "Wait30Seconds",
                      "States": {
                        "Wait30Seconds": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "BookAfter30Seconds"
                         },
                         "BookAfter30Seconds": {
                           "Type": "Task",
                           "Resource": "${GetLOBSnapshotArn}",
                           "End": true
                         }
                       }
                     },
                     {
                      "StartAt": "Wait40Seconds",
                      "States": {
                        "Wait40Seconds": {
                          "Type": "Wait",
                          "Seconds": 40,
                          "Next": "BookAfter40Seconds"
                         },
                         "BookAfter40Seconds": {
                           "Type": "Task",
                           "Resource": "${GetLOBSnapshotArn}",
                           "End": true
                         }
                       }
                     },
                     
                     {
                      "StartAt": "Wait50Seconds",
                      "States": {
                        "Wait50Seconds": {
                          "Type": "Wait",
                          "Seconds": 50,
                          "Next": "BookAfter50Seconds"
                        },
                        "BookAfter50Seconds": {
                          "Type": "Task",
                          "Resource": "${GetLOBSnapshotArn}",
                          "End": true
                        }
                      }
                    }
                  ]
                },
                "CheckResponses": {
                  "Type": "Task",
                  "InputPath": "$.ParallelResultPath",
                  "Resource": "${CheckResponsesArn}",
                  "End": true
                }
              }
            }
          -  {
            GetLOBSnapshotArn: !GetAtt GetLOBSnapshot.Arn,
            CheckResponsesArn: !GetAtt CheckResponses.Arn
            }
    
      RoleArn: !GetAtt StateMachineExecutionRole.Arn

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: !Join ["", ["states.", !Ref "AWS::Region", ".amazonaws.com"]]
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: StepFunctionsInvokeLambda
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt GetLOBSnapshot.Arn
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt CheckResponses.Arn
  Cron:
    Type: AWS::Events::Rule
    Properties:
      Description: Executes Step Functions every minute
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        -
          Arn: !Ref StateMachine
          Id: "LOBSnapshots"
          RoleArn: !GetAtt CronExecutionRole.Arn

  CronExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: CloudWatchEventsStartStepFunctions
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StateMachine