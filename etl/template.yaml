AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Serverless app for saving Poloniex limit order book every 10 seconds.

Parameters:
  NotificationEmail:
    Type: AWS::SSM::Parameter::Value<String>
    Default: myemail # aws ssm put-parameter --name "" --type String --value "" --region eu-west-2
  SpotBidPrice:
    Default: 0.0246
    Description: Spot Instance bid price
    Type: String
  LOBFolderName:
    Description: String text of service name
    Default: 'LOBSnapshots'
    Type: String   
  DailyAggregationServiceName:
    Description: String text of service name
    Default: 'LOBDailyAggregation'
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  NatInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t4g.nano
      ImageId: ami-0f822d3c9e0532335 #ami-0636eac5d73e0e5d7 # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
      SourceDestCheck: false
      #KeyName: pawel
      NetworkInterfaces:
      - GroupSet:
        - Ref: NatInstanceSercurityGroup1
        - Ref: EFSSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: 0
        DeleteOnTermination: true
        SubnetId:
          Ref: PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sysctl -w net.ipv4.ip_forward=1
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          yum install -y iptables-services
          service iptables save

  NatInstanceSercurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the NAT instnace
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: 10.0.11.0/24
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 10.0.11.0/24
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1

  NatInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t4g.nano
      ImageId: ami-0f822d3c9e0532335
      SourceDestCheck: false
      #KeyName: pawel
      NetworkInterfaces:
      - GroupSet:
        - Ref: NatInstanceSercurityGroup2
        - Ref: EFSSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: 0
        DeleteOnTermination: true
        SubnetId:
          Ref: PublicSubnet2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sysctl -w net.ipv4.ip_forward=1
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          yum install -y iptables-services
          service iptables save

  NatInstanceSercurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the NAT instnace
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: 10.0.12.0/24
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 10.0.12.0/24
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1

  EFSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "A security group for Amazon EFS that allows inbound NFS access from resources (including the mount target) associated with this security group (TCP 2049)."
      SecurityGroupEgress:
        - FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
          Description: ""
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - FromPort: 2049
          ToPort: 2049
          IpProtocol: "tcp"
          Description: "Allow NFS traffic - TCP 2049"
          CidrIp: 0.0.0.0/0
      GroupName: "allow-efs-traffic"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance1

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance2

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      #AvailabilityZoneName: us-east-1a # single AZ
      Encrypted: false
      FileSystemPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "elasticfilesystem:ClientMount"
            Principal:
              AWS: "*"

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
      - !Ref EFSSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
      - !Ref EFSSecurityGroup

  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: "/LOBSnapshots" #!Ref LOBFolderName

  GetSnapshots0:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/get_snapshots.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Layers:
        - !Ref RequestsLayer
        - !Ref PolarsLayer
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        RunEveryTenMinutes:
          Type: Schedule
          Properties:
            Schedule: cron(9,19,29,39,49,59 * * * ? *) # every 10 minutes starting 1 minute before 10th min interval
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          DELAY: 0
          SYMBOL0: 'UT_USDT'
          SYMBOL1: 'TRR_USDT'
          SYMBOL2: 'BTT_USDT'
          SYMBOL3: 'FCT2_USDT'
          SYMBOL4: 'TRX_USDT'

  GetSnapshots1:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/get_snapshots.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Layers:
        - !Ref RequestsLayer
        - !Ref PolarsLayer
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        RunEveryTenMinutes:
          Type: Schedule
          Properties:
            Schedule: cron(9,19,29,39,49,59 * * * ? *) # every 10 minutes starting at 9th minute of each hour
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          DELAY: 0
          SYMBOL0: 'BTC_USDT'
          SYMBOL1: 'VOLT_USDT'
          SYMBOL2: 'BNB_USDT'
          SYMBOL3: 'ETH_BTC'
          SYMBOL4: 'LTC_BTC'

  GetSnapshots2:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/get_snapshots.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Layers:
        - !Ref RequestsLayer
        - !Ref PolarsLayer
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        RunEveryTenMinutes:
          Type: Schedule
          Properties:
            Schedule: cron(9,19,29,39,49,59 * * * ? *) # every 10 minutes starting at 9th minute of each hour
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          DELAY: 0
          SYMBOL0: 'AAVE_BTC'
          SYMBOL1: 'TRX_BTC'
          SYMBOL2: 'XRP_BTC'
          SYMBOL3: 'LINK_BTC'
          SYMBOL4: 'SNX_BTC'

  GetSnapshots3:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/get_snapshots.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Layers:
        - !Ref RequestsLayer
        - !Ref PolarsLayer
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        RunEveryTenMinutes:
          Type: Schedule
          Properties:
            Schedule: cron(9,19,29,39,49,59 * * * ? *) # every 10 minutes starting at 9th minute of each hour
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          DELAY: 0
          SYMBOL0: 'DOT_BTC'
          SYMBOL1: 'SOL_BTC'
          SYMBOL2: 'DOGE_BTC'
          SYMBOL3: 'BCH_BTC'
          SYMBOL4: 'MATIC_BTC'

  GetSnapshots4:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/get_snapshots.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Layers:
        - !Ref RequestsLayer
        - !Ref PolarsLayer
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        RunEveryTenMinutes:
          Type: Schedule
          Properties:
            Schedule: cron(9,19,29,39,49,59 * * * ? *) # every 10 minutes starting at 9th minute of each hour
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          DELAY: 0
          SYMBOL0: 'AVA_BTC'
          SYMBOL1: 'WBTC_BTC'
          SYMBOL2: 'ZRX_BTC'
          SYMBOL3: 'FIL_BTC'
          SYMBOL4: 'TUSD_USDT'

  GetSnapshots5:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/get_snapshots.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Layers:
        - !Ref RequestsLayer
        - !Ref PolarsLayer
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        RunEveryTenMinutes:
          Type: Schedule
          Properties:
            Schedule: cron(9,19,29,39,49,59 * * * ? *) # every 10 minutes starting at 9th minute of each hour
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          DELAY: 0
          SYMBOL0: 'TUSD_USDC'
          SYMBOL1: 'USDD_USDT'
          SYMBOL2: 'ETH_TRX'
          SYMBOL3: 'ETHW_ETH'
          SYMBOL4: 'AFC_USDD'

  Aggregate:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/aggregate.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 5500
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Layers:
        - !Ref PolarsLayer
        - !Ref PyarrowLayer
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        RunDaily:
          Type: Schedule
          Properties:
            Schedule: cron(15 0 * * ? *) # at 0:15am
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"

  MoveToS3:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetResource1
      - MountTargetResource2
    Properties:
      Handler: functions/move_to_s3.lambda_handler
      Architectures:
        - arm64
      Runtime: python3.9
      Timeout: 900
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Policies:
        - AmazonElasticFileSystemClientReadWriteAccess
        - AWSLambdaVPCAccessExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref Snapshots
      Events:
        RunDaily:
          Type: Schedule
          Properties:
            Schedule: cron(30 0 * * ? *) # at 0:30am
      FileSystemConfigs:
        - LocalMountPath: "/mnt/efs"
          Arn: !GetAtt AccessPointResource.Arn
      Environment:
        Variables:
          EFS_PATH: "/mnt/efs"
          BUCKET: !Ref Snapshots

  RequestsLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        LayerName: requests-arm64
        Description: Lambda layer with requests Arm64
        ContentUri: ../layers/requests

  PolarsLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        LayerName: polars-arm64
        Description: Lambda layer with polars Arm64
        ContentUri: ../layers/polars

  PyarrowLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        LayerName: pyarrow-arm64
        Description: Lambda layer with pyarrow Arm64
        ContentUri: ../layers/pyarrow

  LogGroupGetSnapshots0:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GetSnapshots0]]

  LogGroupGetSnapshots1:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GetSnapshots1]]

  LogGroupGetSnapshots2:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GetSnapshots2]]

  LogGroupGetSnapshots3:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GetSnapshots3]]

  LogGroupGetSnapshots4:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GetSnapshots4]]

  LogGroupGetSnapshots5:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GetSnapshots5]]

  LogGroupAggregate:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref Aggregate]]

  MetricFilterGetSnapshots0:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroupGetSnapshots0
      FilterPattern: '?Exception ?rror'
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: test/missingData
        MetricName: GetSnapshotsError

  MetricFilterGetSnapshots1:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroupGetSnapshots1
      FilterPattern: '?Exception ?rror'
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: test/missingData
        MetricName: GetSnapshotsError

  MetricFilterGetSnapshots2:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroupGetSnapshots2
      FilterPattern: '?Exception ?rror'
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: test/missingData
        MetricName: GetSnapshotsError

  MetricFilterGetSnapshots3:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroupGetSnapshots3
      FilterPattern: '?Exception ?rror'
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: test/missingData
        MetricName: GetSnapshotsError

  MetricFilterGetSnapshots4:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroupGetSnapshots4
      FilterPattern: '?Exception ?rror'
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: test/missingData
        MetricName: GetSnapshotsError

  MetricFilterGetSnapshots5:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroupGetSnapshots5
      FilterPattern: '?Exception ?rror'
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: test/missingData
        MetricName: GetSnapshotsError

  MetricFilterAggregate:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroupAggregate
      FilterPattern: '?Exception ?rror'
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: test/missingData
        MetricName: GetSnapshotsError

  AlarmGetSnapshots:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Snapshot not saved to temp folder
        MetricName: GetSnapshotsError
        Namespace: test/missingData
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 1
        TreatMissingData: notBreaching
        AlarmActions:
        - !Ref AlarmNotificationTopic
        ComparisonOperator: GreaterThanThreshold

  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Protocol: email
        Endpoint: !Ref NotificationEmail

  Snapshots:
    Type: AWS::S3::Bucket
    Properties:
      #BucketName: Snapshots
      AccessControl: Private
      VersioningConfiguration:
        Status: Suspended
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 3
            Status: Enabled
